generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id            String        @id @default(uuid())
  nombres       String
  apellidos     String
  numDoc        String        @unique
  sexo          String
  telefono      Int
  email         String        @unique
  tipoDocumento TipoDocumento
  Reserva       Reserva[]
}

model Recepcionista {
  id            String        @id @default(uuid())
  nombres       String
  apellidos     String
  numDoc        String        @unique
  tipoDocumento TipoDocumento
  Reserva       Reserva[]
}

model Habitacion {
  id             String         @id @default(uuid())
  numHabitacion  String         @unique
  estado         Boolean        @default(true)
  tipoHabitacion TipoHabitacion
  precio         Float
  Reserva        Reserva[]
}

model Reserva {
  id              String        @id @default(uuid())
  idCliente       String
  idHabitacion    String
  idRecepcionista String
  fechaInicio     String
  fechaFin        String
  estado          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  cliente         Cliente       @relation(fields: [idCliente], references: [id])
  habitacion      Habitacion    @relation(fields: [idHabitacion], references: [id])
  recepcionista   Recepcionista @relation(fields: [idRecepcionista], references: [id])
}

enum TipoDocumento {
  DNI
  CEX
  RUC
  PASAPORTE
}

enum TipoHabitacion {
  SIMPLE
  DOBLE
  MATRIMONIAL
}


model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}